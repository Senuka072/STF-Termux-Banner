import os
import colorama
from colorama import Fore


os.system("pkg upgrade")
print(Fore.MAGENTA + "Done Upgrade")

os.system("pkg update")
print(Fore.MAGENTA + "Done update")

os.system("pkg python")
print(Fore.MAGENTA + "Done installing Python")

os.system("pkg ruby")
print(Fore.MAGENTA + "Done installing Rubuy")

os.system("pkg install figlet")
os.system("figlet Done installing figlet")
                                                                                
os.system("gem install lolcat")
os.system("figlet Done installing Lolcat | lolcat")                             
os.system("pkg install cowsay")                                                 
os.system("cowsay Done installing Cowsay | lolcat")

os.system("pip install colorama")
os.system("figlet Done installing Colorama | lolcat")

os.system("pip install neofetch")
os.system("figlter Done installing Neofetch | lolcat")

os.system("figlet Done installing All Packages | lolcat")